# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

module Bulkrax
  RSpec.describe ImportersController, type: :controller do
    routes { Bulkrax::Engine.routes }

    before do
      module Bulkrax::Auth
        def authenticate_user!
          @current_user = User.first
          true
        end

        def current_user
          @current_user
        end
      end
      described_class.prepend Bulkrax::Auth
      allow(Bulkrax::ImporterJob).to receive(:perform_later).and_return(true)
    end

    # This should return the minimal set of attributes required to create a valid
    # Importer. As you add validations to Importer, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) do
      {
        name: 'Test Importer',
        admin_set_id: 'admin_set/default',
        user_id: FactoryBot.create(:user).id,
        parser_klass: 'Bulkrax::CsvParser',
        parser_fields: { some_attribute: 'something' }
      }
    end

    let(:invalid_attributes) do
      {
        name: '',
        admin_set_id: 'admin_set/default',
        user_id: nil,
        parser_fields: { some_attribute: 'something' }
      }
    end

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # ImportersController. Be sure to keep this updated too.
    let(:valid_session) { {} }

    describe 'GET #index' do
      it 'returns a success response' do
        Importer.create! valid_attributes
        get :index, params: {}, session: valid_session
        expect(response).to be_successful
      end
    end

    describe 'GET #show' do
      it 'returns a success response' do
        importer = Importer.create! valid_attributes
        get :show, params: { id: importer.to_param }, session: valid_session
        expect(response).to be_successful
      end
    end

    describe 'GET #new' do
      it 'returns a success response' do
        get :new, params: {}, session: valid_session
        expect(response).to be_successful
      end
    end

    describe 'GET #edit' do
      it 'returns a success response' do
        importer = Importer.create! valid_attributes
        get :edit, params: { id: importer.to_param }, session: valid_session
        expect(response).to be_successful
      end
    end

    describe 'POST #create' do
      context 'with valid params' do
        it 'creates a new Importer' do
          expect do
            post :create, params: { importer: valid_attributes }, session: valid_session
          end.to change(Importer, :count).by(1)
        end

        it 'redirects to the created importer' do
          post :create, params: { importer: valid_attributes }, session: valid_session
          expect(response).to redirect_to(importers_path)
        end
      end

      context 'with invalid params' do
        it "returns a success response (i.e. to display the 'new' template)" do
          post :create, params: { importer: invalid_attributes }, session: valid_session
          expect(response).to be_successful
        end
      end

      context 'with Create and Validate' do
        let(:importer) { Importer.create! valid_attributes }

        it 'uses perform_now' do
          expect(Bulkrax::ImporterJob).to receive(:perform_now).exactly(1).times
          post :create, params: { importer: valid_attributes, commit: 'Create and Validate' }, session: valid_session
        end
      end
    end

    describe 'PUT #update' do
      context 'with valid params' do
        let(:new_attributes) do
          {
            name: 'Test Importer Updated',
            admin_set_id: 'admin_set/default',
            user_id: FactoryBot.create(:user).id,
            parser_fields: { some_attribute: 'something' }
          }
        end

        it 'updates the requested importer' do
          importer = Importer.create! valid_attributes
          put :update, params: { id: importer.to_param, importer: new_attributes }, session: valid_session
          importer.reload
          expect(importer.name).to eq('Test Importer Updated')
        end

        it 'redirects to the importer' do
          importer = Importer.create! valid_attributes
          put :update, params: { id: importer.to_param, importer: valid_attributes }, session: valid_session
          expect(response).to redirect_to(importers_path)
        end
      end

      context 'with invalid params' do
        it "returns a success response (i.e. to display the 'edit' template)" do
          importer = Importer.create! valid_attributes
          put :update, params: { id: importer.to_param, importer: invalid_attributes }, session: valid_session
          expect(response).to be_successful
        end
      end
    end

    describe 'PUT #continue' do
      let(:importer) { Importer.create! valid_attributes }
      let(:valid_attributes) do
        {
          name: 'Test Importer',
          admin_set_id: 'admin_set/default',
          user_id: FactoryBot.create(:user).id,
          parser_klass: 'Bulkrax::CsvParser',
          parser_fields: { some_attribute: 'something' },
          validate_only: false
        }
      end

      it 'sets validate_only to false' do
        put :continue, params: { importer_id: importer.to_param }, session: valid_session
        importer.reload
        expect(importer.validate_only).to eq(false)
      end

      it 'calls update' do
        expect(controller).to receive(:update)
        put :continue, params: { importer_id: importer.to_param }, session: valid_session
      end
    end

    describe 'DELETE #destroy' do
      it 'destroys the requested importer' do
        importer = Importer.create! valid_attributes
        expect do
          delete :destroy, params: { id: importer.to_param }, session: valid_session
        end.to change(Importer, :count).by(-1)
      end

      it 'redirects to the importers list' do
        importer = Importer.create! valid_attributes
        delete :destroy, params: { id: importer.to_param }, session: valid_session
        expect(response).to redirect_to(importers_url)
      end
    end

    describe 'GET #export_errors', clean_downloads: true do
      let(:importer) { FactoryBot.create(:bulkrax_importer_csv_failed, entries: [failed_entry]) }
      let(:failed_entry) { FactoryBot.create(:bulkrax_csv_entry_failed) }
      let(:import_file_path) { importer.errored_entries_csv_path }

      before do
        importer.parser_fields.merge!(import_file_path: import_file_path)
      end

      it 'writes a CSV file containing the contents of failed entries' do
        expect(File.exist?(import_file_path)).to eq(false)

        get :export_errors, params: { importer_id: importer.to_param }, session: valid_session

        expect(File.exist?(import_file_path)).to eq(true)
        expect(File.read(import_file_path)).to include('Title,')
      end
    end

    describe 'GET #upload_corrected_entries' do
      it 'returns a success response' do
        importer = Importer.create! valid_attributes
        get :upload_corrected_entries, params: { importer_id: importer.to_param }, session: valid_session
        expect(response).to be_successful
      end
    end

    describe 'POST #upload_corrected_entries_file', clean_downloads: true do
      context 'with valid params' do
        let(:file_upload_params) do
          {
            parser_fields: {
              file: fixture_file_upload('./spec/fixtures/csv/ok.csv')
            }
          }
        end

        it 'sets partial_import_file_path on the requested importer' do
          importer = FactoryBot.create(:bulkrax_importer_csv_failed)
          expect(importer.parser_fields['partial_import_file_path']).not_to be_present

          post :upload_corrected_entries_file, params: { importer_id: importer.to_param, importer: file_upload_params }, session: valid_session
          expect(importer.reload.parser_fields['partial_import_file_path']).to be_present
        end

        it 'invokes Bulkrax::ImporterJob' do
          expect(Bulkrax::ImporterJob).to receive(:perform_later).exactly(1).times
          importer = FactoryBot.create(:bulkrax_importer_csv_failed)
          post :upload_corrected_entries_file, params: { importer_id: importer.to_param, importer: file_upload_params }, session: valid_session
        end

        it 'redirects to the importer with a notice' do
          importer = FactoryBot.create(:bulkrax_importer_csv_failed)
          post :upload_corrected_entries_file, params: { importer_id: importer.to_param, importer: file_upload_params }, session: valid_session
          expect(response).to redirect_to(importer_path(importer))
          expect(flash[:notice]).to include('successfully')
        end
      end

      context 'with invalid params' do
        let(:bad_file_upload_params) do
          {
            parser_fields: {
              file: nil
            }
          }
        end

        it 'redirects to the upload_corrected_entries view with an alert' do
          importer = Importer.create! valid_attributes
          post :upload_corrected_entries_file, params: { importer_id: importer.to_param, importer: bad_file_upload_params }, session: valid_session
          expect(response).to redirect_to(importer_upload_corrected_entries_path(importer))
          expect(flash[:alert]).to include('failed')
        end
      end
    end

    context 'with application/json request' do
      before do
        allow(controller).to receive(:api_request?).and_return(true)
        allow(AdminSet).to receive(:find).with('admin_set/default')
        allow(User).to receive(:batch_user).and_return(FactoryBot.create(:user))
        allow(controller).to receive(:valid_parser_fields?).and_return(true)
      end

      context 'with valid params' do
        before do
          ENV['BULKRAX_API_TOKEN'] = '1234'
          request.headers['Authorization'] = 'Token: 1234'
        end

        it 'creates a new Importer' do
          expect do
            post :create, params: { importer: valid_attributes, commit: 'Create' }, session: valid_session
          end.to change(Importer, :count).by(1)
        end

        it 'returns a 201 Created' do
          post :create, params: { importer: valid_attributes, commit: 'Create' }, session: valid_session
          expect(response.status).to eq(201)
        end
      end

      context 'with invalid params' do
        before do
          ENV['BULKRAX_API_TOKEN'] = '1234'
          request.headers['Authorization'] = 'Token: 1234'
        end

        it "returns a 422 Unprocessable Entry" do
          post :create, params: { importer: invalid_attributes, commit: 'Create' }, session: valid_session
          expect(response.status).to eq(422)
        end
      end

      context 'without a valid auth token' do
        it 'returns a 401 Not Authenticated' do
          post :create, params: { importer: valid_attributes, commit: 'Create' }, session: valid_session
          expect(response.status).to eq(401)
        end
      end

      describe 'PUT #update' do
        before do
          allow(AdminSet).to receive(:find).with('admin_set/default')
          allow(User).to receive(:batch_user).and_return(FactoryBot.create(:user))
        end

        context 'with valid params' do
          let(:new_attributes) do
            {
              name: 'Test Importer Updated',
              admin_set_id: 'admin_set/default',
              user_id: FactoryBot.create(:user).id,
              parser_fields: { some_attribute: 'something' }
            }
          end

          before do
            ENV['BULKRAX_API_TOKEN'] = '1234'
            request.headers['Authorization'] = 'Token: 1234'
          end

          it 'updates the requested importer' do
            importer = Importer.create! valid_attributes
            put :update, params: { id: importer.to_param, importer: new_attributes, commit: 'Update Importer' }, session: valid_session
            importer.reload
            expect(importer.name).to eq('Test Importer Updated')
          end

          it 'returns a 200 OK' do
            importer = Importer.create! valid_attributes
            put :update, params: { id: importer.to_param, importer: valid_attributes, commit: 'Update Importer' }, session: valid_session
            expect(response.status).to eq(200)
          end
        end

        context 'with invalid params' do
          before do
            ENV['BULKRAX_API_TOKEN'] = '1234'
            request.headers['Authorization'] = 'Token: 1234'
          end

          it "returns a 422 Unprocessable Entry" do
            importer = Importer.create! valid_attributes
            put :update, params: { id: importer.to_param, importer: invalid_attributes, commit: 'Update Importer' }, session: valid_session
            expect(response.status).to eq(422)
          end
        end

        context 'without a valid auth token' do
          it 'returns a 401 Unauthorized without an access token' do
            importer = Importer.create! valid_attributes
            put :update, params: { id: importer.to_param, importer: valid_attributes, commit: 'Update Importer' }, session: valid_session
            expect(response.status).to eq(401)
          end
        end
      end

      describe 'DELETE #destroy' do
        it 'destroys the requested importer' do
          importer = Importer.create! valid_attributes
          expect do
            delete :destroy, params: { id: importer.to_param }, session: valid_session
          end.to change(Importer, :count).by(-1)
          expect(response.status).to eq(200)
        end

        it 'returns a 200 OK' do
          importer = Importer.create! valid_attributes
          delete :destroy, params: { id: importer.to_param }, session: valid_session
          expect(response.status).to eq(200)
        end
      end

      describe 'GET #entry_table' do
        let(:importer) { FactoryBot.create(:bulkrax_importer) }
        let(:valid_session) { {} }

        before do
          allow(controller).to receive(:table_order).and_return('created_at asc')
        end

        it 'returns a success response' do
          get :entry_table, params: { importer_id: importer.to_param, format: :json }, session: valid_session
          expect(response).to be_successful
        end

        it 'returns entries in the correct order' do
          entry1 = FactoryBot.create(:bulkrax_csv_entry, importerexporter: importer, created_at: 2.days.ago)
          entry2 = FactoryBot.create(:bulkrax_csv_entry, importerexporter: importer, created_at: 1.day.ago)
          entry3 = FactoryBot.create(:bulkrax_csv_entry, importerexporter: importer, created_at: 3.days.ago)
          get :entry_table, params: { importer_id: importer.to_param, format: :json }, session: valid_session
          parsed_response = JSON.parse(response.body)
          entry_ids_in_response = parsed_response["data"].map { |e| e["id"] }
          expect(entry_ids_in_response).to eq([entry3.id, entry1.id, entry2.id])
        end

        context 'when table_search is present' do
          it 'filters entries based on table_search' do
            identifier_value = 'test_identifier'
            matching_entry = FactoryBot.create(:bulkrax_csv_entry, importerexporter: importer, identifier: identifier_value)
            non_matching_entry1 = FactoryBot.create(:bulkrax_csv_entry, importerexporter: importer, identifier: "unrelated_identifier")
            non_matching_entry2 = FactoryBot.create(:bulkrax_csv_entry, importerexporter: importer, identifier: 'another_unrelated_identifier')
            get :entry_table, params: { importer_id: importer.to_param, search: { value: identifier_value }, format: :json }, session: valid_session
            entry_ids_in_response = JSON.parse(response.body)["data"].map { |e| e["id"] }
            expect(entry_ids_in_response).to include(matching_entry.id)
            expect(entry_ids_in_response).not_to include(non_matching_entry1.id, non_matching_entry2.id)
          end
        end
      end
    end
  end
end
